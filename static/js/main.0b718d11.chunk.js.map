{"version":3,"sources":["logo.svg","Components/Options.js","Components/Keywords.js","Components/InputValueController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Options","props","sentences","brand","loc","map","s","Keywords","keywords","join","InputValueController","title","value","onChange","App","useState","setBrand","brandLocation","setBrandLocation","className","src","logo","alt","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,gLCqB5BC,G,MAlBC,SAACC,GAEf,IAAMC,EAAY,CAACD,EAAME,MAAQ,OAASF,EAAMG,IAAM,+GACtDH,EAAME,MAAQ,yDAA2DF,EAAMG,IAAM,2DACrF,2CAA6CH,EAAME,MAAQ,aAAeF,EAAMG,IAAM,2EACtFH,EAAME,MAAQ,oBAAuBF,EAAMG,IAAK,0HAChDH,EAAME,MAAQ,cAAgBF,EAAMG,IAAM,iHAE1C,OACI,6BACI,6DACA,4BACKF,EAAUG,KAAI,SAACC,GAAD,OAAO,4BAAKA,UCA1BC,EAbE,SAACN,GACd,IAAIO,EAAW,CAAC,sBAAuB,qBAAsB,iCAAkC,wBAC/F,UAAWP,EAAMG,IAAM,UAAW,cAAe,mBAAoB,eAAgB,kBAAmB,gBAExG,OACI,6BACI,wCACA,2BAAII,EAASC,UCGVC,EAVc,SAACT,GAE9B,OACI,6BACI,4BAAKA,EAAMU,OACX,2BAAOC,MAAOX,EAAMW,MAAOC,SAAUZ,EAAMY,aCkDpCC,MAlDf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENZ,EAFM,KAECa,EAFD,OAG6BD,mBAAS,IAHtC,mBAGNE,EAHM,KAGSC,EAHT,KAeb,OAEE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,0CACA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAG3C,8BAEE,yBAAKH,UAAU,kBAEb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAsBR,MAAM,QAAQC,MAAOT,EAAOU,SAxBpC,SAACU,GAEzBP,EAASO,EAAMC,OAAOZ,WAyBd,yBAAKO,UAAU,cACb,kBAAC,EAAD,CAAsBR,MAAM,WAAWC,MAAOK,EAAeJ,SAvBvC,SAACU,GAEjCL,EAAiBK,EAAMC,OAAOZ,YAyBxB,6BACE,6BAAS,6BACT,kBAAC,EAAD,CAAUR,IAAKa,IACf,6BACA,kBAAC,EAAD,CAASb,IAAKa,EAAed,MAAOA,SCpC5BsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0b718d11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\n\nconst Options = (props) => {\n\n  const sentences = [props.brand + ' is ' + props.loc + '\\'s top Roofing Contractor. Contact us today to get an estimate on your next roof replacement or roof repair!',\n  props.brand + ' is the leading residential roofing contractor in the ' + props.loc + ' area. Contact us today about your next roofing project!',\n  'Experienced, reliable roofers near you. ' + props.brand + ' provides ' + props.loc + ' with roof repair & replacement, backed by outstanding customer service.',\n  props.brand + ' is your trusted '  + props.loc +' Roofing Contractor. Whether you need roofing, siding, gutters or windows we can assist. Call for your free inspection!',\n  props.brand + ' is one of ' + props.loc + '\\'s leading Roofing Contractors. We specialize in everything from Residential to Commercial. Contact us today!']\n\n  return (\n      <div>\n          <h2>Title & Description Option(s)</h2>\n          <ul>\n              {sentences.map((s) => <li>{s}</li>)}\n          </ul>\n      </div>\n  )\n}\n\nexport default Options;\n","import React from 'react';\n\nconst Keywords = (props) => {\n    var keywords = ['residential roofing', 'roofing contractor', 'residential roofing contractor', 'local roofing company', \n    'roofing', props.loc + ' roofer', 'roof repair', 'roof replacement', 'flat roofing', 'shingle roofing', 'tile roofing'];\n\n    return (\n        <div>\n            <h2>Keywords</h2>\n            <p>{keywords.join()}</p>\n        </div>\n    )\n\n}\n\nexport default Keywords;\n","import React from 'react';\n\nconst InputValueController = (props) => \n{\nreturn (\n    <div>\n        <h2>{props.title}</h2>\n        <input value={props.value} onChange={props.onChange}></input>\n    </div>\n)\n}\n\nexport default InputValueController;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Options from './Components/Options';\nimport Keywords from './Components/Keywords';\nimport InputValueController from './Components/InputValueController'\n\nfunction App() {\n\n  const [brand, setBrand] = useState('');\n  const [brandLocation, setBrandLocation] = useState('');\n\n  const handleBrandChange = (event) => \n  {\n    setBrand(event.target.value);\n  }\n\n  const handleBrandLocationChange = (event) => \n  {\n    setBrandLocation(event.target.value);\n  }\n\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <h1>gmb-autofy</h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n\n        <body>\n\n          <div className=\"flex-container\">\n\n            <div className=\"flex-child\">\n              <InputValueController title=\"Brand\" value={brand} onChange={handleBrandChange} />\n            </div>\n\n            <div className=\"flex-child\">\n              <InputValueController title=\"Location\" value={brandLocation} onChange={handleBrandLocationChange} />\n            </div>\n          </div>\n\n          <div>\n            <br></br><br></br>\n            <Keywords loc={brandLocation} />\n            <br></br>\n            <Options loc={brandLocation} brand={brand} />\n          </div>\n        </body>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}